FORMAT: 1A
HOST: http://lore.odl.mit.edu/api/v1/

# LORE

The Learning Objects Repository for Education (LORE) project seeks to build a library of online “learning objects” that will enable the efficient reuse of resources from previous MITx courses by professors and instructional staff. See https://github.com/mitodl/lore

This API exposes the LORE application as a RESTful web service.

# URL
URL Structure is `https://{domain}/api/v1/{resource}/{resource_id}/`

| Code   | Description |
| ---    | --- |
|`{domain}`    | The domain of the LORE service. `private-b0103d-lore.apiary-mock.com/` is the Apiary mock server. |
|`/api/v1/`    | The service endpoint includes the current version (v1). |
|`{resource}`  | The resource endpoint for a specific set of items in the system. |
|`{resource_id}`  |The `resource_id` sets the unique identifier (name or numerical) for a specific item to reference. |

*Example: `http://lore.odl.mit.edu/api/v1/repositories/` will return a JSON representation of all repositories.*

*Example: `http://lore.odl.mit.edu/api/v1/repositories/physics-1/` will return a JSON representation of the repository with name "physics-1".*

*Example: `http://lore.odl.mit.edu/api/v1/repositories/physics-1/learning_resources/1007/` will return a JSON representation
of the learning resource with ID=1007.*


# Operations
LORE API uses the following HTTP verbs:

| Verb   | Description |
| ---    | --- |
|`GET`   |Select one or more items. Success returns 200 status code with JSON result item(s) in body.|
|`POST`  |Create a new item. Success returns 201 status code with newly created JSON item in body.|
|`PUT`   |Update an item. Success returns 200 status code with updated JSON item in body.|
|`PATCH` |Update part of an item. Success returns a 200 status code with updated JSON item in body.|
|`DELETE`|Delete an item. Success returns 204 status code with no body.|

# Status Codes
The API responds with one of the following status codes:

| Code| Description |
| --- | --- |
|`200`| Success - request completed. |
|`201`| Success - new resource created. |
|`204`| Success - no content to return, resource successfully deleted. |
|`400`| Bad Request - request could not be parsed. |
|`401`| Unauthorized - user is not logged in, cannot access resource. |
|`403`| Forbidden - user does not have permission to access resource. |
|`404`| Not Found - resource doesn't exist. |
|`405`| Method Not Allowed - resource cannot be accessed using this method. |
|`422`| Unprocessable Entity - request could not be parsed due to validation errors. |
|`500`| Server error - request could not be processed due to a server error. |


# Authentication

The API uses basic or session-based authentication to authenticate users using the same credentials as the main application.

# Pagination

Requests that return multiple items accept a `?page` parameter.

Example: `http://lore.odl.mit.edu/api/v1/repositories/?page=2`

Page numbering is 1-based. Omitting the `?page` parameter will return the first page. There are up to 20 results per page.

# LORE API

## Group LearningResourceTypes

## LearningResourceType Collection [/learning_resource_types/]

### List All LearningResourceTypes [GET]

+ Response 200 (application/json)

        {
            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "name": "course"
                },
                {
                    "name": "chapter"
                }
            ]
        }

## Group Repositories

## Repository Collection [/repositories/]

### List All Repositories [GET]

+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "slug": "physics-1",
                    "name": "Physics 1",
                    "description": "All intro-to-physics courses",
                    "create_date": "2015-06-22"
                }
            ]
        }

### Create a New Repository [POST]

Create a repository by providing its JSON representation.

+ Request (application/json)

        {
            "name": "Physics 1",
            "description": "All intro-to-physics courses"
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/repositories/physics-1/

    + Body

            {
                "id": 1,
                "slug": "physics-1",
                "name": "Physics 1",
                "description": "All intro-to-physics courses",
                "create_date": "2015-06-17"
            }

## Repository [/repositories/{repo_slug}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository

### Retrieve a Repository [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "slug": "physics-1",
            "name": "Physics 1",
            "description": "All intro-to-physics courses",
            "create_date": "2015-06-22"
        }

## Group SearchResults

## SearchResult Collection [/repositories/{repo_slug}/search/{?q,sortby,selected_facets}]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + q: `zebra` (string, optional) - a piece of text to search with. If this is blank or omitted all results will be returned.
    + sortby: `nr_views` (string, optional) - a column to sort results by. This is descending by default, add prefix '-' to sort in ascending order. May be one of: nr_views, nr_attempts, avg_grade.
    + selected_facets: `course:DemoX` (string, optional) - a facet to narrow searches. Param may be specified more than once to narrow on multiple facets.

### List SearchResults [GET]

+ Response 200 (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "resource_type": "discussion",
                    "course": "DemoX",
                    "run": "Demo_Course",
                    "xa_nr_views": 12,
                    "xa_nr_attempts": 1,
                    "xa_avg_grade": 4.0,
                    "lid": 91,
                    "title": "Peer Grading",
                    "description": "",
                    "description_path": "...",
                    "preview_url": "..."
                }
            ],
            "facet_counts": {
                "course": {
                    "facet": {
                        "key": "course",
                        "label": "Course"
                    },
                    "values": [
                        {
                            "count": 1,
                            "key": "DemoX",
                            "label": "DemoX"
                        }
                    ]
                },
                "run": {
                    "facet": {
                        "key": "run",
                        "label": "Run"
                    },
                    "values": [
                        {
                            "count": 1,
                            "key": "Demo_Course",
                            "label": "Demo_Course"
                        }
                    ]
                },
                "resource_type": {
                    "facet": {
                        "key": "resource_type",
                        "label": "Item Type"
                    },
                    "values": [
                        {
                            "count": 1,
                            "key": "discussion",
                            "label": "discussion"
                        }
                    ]
                }
            }
        }

## Group LearningResources

## LearningResource Collection [/repositories/{repo_slug}/learning_resources/{?id}]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + id: `1,9` (string, optional) - comma separated list of LearningResource ids. Will filter out LearningResources not in this list.

### List LearningResources [GET]

+ Response 200 (application/json)

    + Body

        {
            "count": 139,
            "next": "http://lore.odl.mit.edu/api/v1/repositories/repo/learning_resources/?page=2",
            "previous": null,
            "results": [
                {
                    "id": 8,
                    "learning_resource_type": "vertical",
                    "static_assets": [],
                    "title": "Getting Started",
                    "description": "description",
                    "content_xml": "<vertical ...",
                    "materialized_path": "/course/chapter[2]/sequential[1]/vertical[1]",
                    "url_path": "",
                    "parent": 7,
                    "copyright": "",
                    "xa_nr_views": 0,
                    "xa_nr_attempts": 0,
                    "xa_avg_grade": 0.0,
                    "xa_histogram_grade": 0.0,
                    "terms": [],
                    "preview_url": "https://www.example.com/courses..."
                },
                ...
            ]
        }

## LearningResource  [/repositories/{repo_slug}/learning_resources/{learningresource_id}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + learningresource_id: `8` (number, required) - ID of the LearningResource

### View a LearningResource [GET]

+ Response 200 (application/json)

        {
            "id": 8,
            "learning_resource_type": "vertical",
            "static_assets": [],
            "title": "Getting Started",
            "description": "description",
            "content_xml": "<vertical ...",
            "materialized_path": "/course/chapter[2]/sequential[1]/vertical[1]",
            "url_path": "",
            "parent": 7,
            "copyright": "",
            "xa_nr_views": 0,
            "xa_nr_attempts": 0,
            "xa_avg_grade": 0.0,
            "xa_histogram_grade": 0.0,
            "terms": [],
            "preview_url": "https://www.example.com/courses..."
        }

### Partially Update a LearningResource [PATCH]

+ Request (application/json)

        {
            "description": "changed description"
        }

+ Response 200 (application/json)

        {
            "id": 8,
            "learning_resource_type": "vertical",
            "static_assets": [],
            "title": "Getting Started",
            "description": "changed description",
            "content_xml": "<vertical ...",
            "materialized_path": "/course/chapter[2]/sequential[1]/vertical[1]",
            "url_path": "",
            "parent": 7,
            "copyright": "",
            "xa_nr_views": 0,
            "xa_nr_attempts": 0,
            "xa_avg_grade": 0.0,
            "xa_histogram_grade": 0.0,
            "terms": [],
            "preview_url": "https://www.example.com/courses..."
        }

### Update a LearningResource [PUT]

+ Request (application/json)

        {
            "description": "changed description",
            "terms": []
        }

+ Response 200 (application/json)

        {
            "id": 8,
            "learning_resource_type": "vertical",
            "static_assets": [],
            "title": "Getting Started",
            "description": "changed description",
            "content_xml": "<vertical ...",
            "materialized_path": "/course/chapter[2]/sequential[1]/vertical[1]",
            "url_path": "",
            "parent": 7,
            "copyright": "",
            "xa_nr_views": 0,
            "xa_nr_attempts": 0,
            "xa_avg_grade": 0.0,
            "xa_histogram_grade": 0.0,
            "terms": [],
            "preview_url": "https://www.example.com/courses..."
        }

## Group LearningResourceExports

List of LearningResources to be exported. This is stored per user and is deleted on logout.

## LearningResourceExport Collection [/repositories/{repo_slug}/learning_resource_exports/{username}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + username: `sarah` (string, required) - owner of exports (must be logged in user)

### List All LearningResourceExports [GET]

+ Response 200 (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 13
                }
            ]
        }

### Delete LearningResourceExports [DELETE]

Clears the export list for this repository.

+ Response 204 (application/json)

### Add a LearningResource ID to Export list [POST]

+ Request (application/json)

        {
            "id": 15
        }

+ Response 201 (application/json)

        {
            "id": 15
        }

## LearningResourceExport [/repositories/{repo_slug}/learning_resource_exports/{username}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + username: `sarah` (string, required) - owner of exports (must be logged in user)

### View a LearningResourceExport [GET]

+ Response 200 (application/json)

        {
            "id": 13
        }

### Delete an ID from the LearningResource export list [DELETE]

+ Response 204 (application/json)

## Group LearningResourceExportTasks

## LearningResourceExportTasks Collection [/repositories/{repo_slug}/learning_resource_export_tasks/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository

### List All LearningResourceExportTasks [GET]

List all recent LearningResourceExportTasks for a user.

+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "45e3c830-0ff8-4d84-85b4-c0a6e3ce81b3",
                    "status": "processing",
                    "url": "/media/resource_exports/sarah_exports.tar.gz"
                }
            ]
        }

### Create a New LearningResourceExportTask [POST]

Queue a new LearningResourceExportTask task for the given LearningResource ids.

+ Request (application/json)

        {
            "ids": [1]
        }

+ Response 200 (application/json)

        {
            "id": "45e3c830-0ff8-4d84-85b4-c0a6e3ce81b3"
        }

## LearningResourceExportTask [/repositories/{repo_slug}/learning_resource_export_tasks/{task_id}/

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + task_id: `45e3c830-0ff8-4d84-85b4-c0a6e3ce81b3` (string, required) - task identifier

### Retrieve a LearningResourceExportTask [GET]

+ Response 200 (application/json)

        {
            "id": "45e3c830-0ff8-4d84-85b4-c0a6e3ce81b3",
            "status": "success",
            "url": "/media/resource_exports/sarah_exports.tar.gz"
        }

## Group StaticAssets

## StaticAssets Collection [/repositories/{repo_slug}/learning_resources/{learningresource_id}/static_assets/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + learningresource_id: `1` (number, required) - ID of the LearningResource

### List All StaticAssets [GET]

+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "asset": "assets/edX/DemoX/Demo_Course/L9_buckets.png",
                    "name": "L9_buckets.png"
                }
            ]
        }

## StaticAsset [/repositories/{repo_slug}/learning_resources/{learningresource_id}/static_assets/{static_asset_id}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + learningresource_id: `1` (number, required) - ID of the LearningResource
    + static_asset_id: `1` (number, required) - ID of the StaticAsset

### View a StaticAsset [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "asset": "assets/edX/DemoX/Demo_Course/L9_buckets.png",
            "name": "L9_buckets.png"
        }

## Group Vocabularies

## Vocabularies Collection [/repositories/{repo_slug}/vocabularies/{?type_name}]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + type_name: `Problem` (string, optional) - if specified, filter by this learning resource type

### List All Vocabularies [GET]

+ Response 200 (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 7,
                    "slug": "difficulty",
                    "name": "difficulty",
                    "description": "Learning resource difficulty",
                    "vocabulary_type": "m",
                    "required": true,
                    "weight": 1,
                    "learning_resource_types": [
                        "Problem",
                        "Vertical"
                    ],
                    "terms": [
                        {
                            "id": 1,
                            "slug": "easy",
                            "label": "Easy",
                            "weight": 1
                        }
                    ],
                    "multi_terms": false
                }
            ]
        }

### Create a New Vocabulary [POST]

+ Request (application/json)

        {
            "name": "difficulty",
            "description": "Learning resource difficulty",
            "vocabulary_type": "m",
            "weight": 1,
            "required": true,
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ],
            "multi_terms": false
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/repositories/physics-1/vocabularies/difficulty/

    + Body

        {
            "id": 7,
            "slug": "difficulty",
            "name": "difficulty",
            "description": "Learning resource difficulty",
            "vocabulary_type": "m",
            "required": true,
            "weight": 1,
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ],
            "terms": [],
            "multi_terms": false
        }


## Vocabulary [/repositories/{repo_slug}/vocabularies/{vocab_slug}/]


+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + vocab_slug: `difficulty` (string, required) - slug for the vocabulary

### View a Vocabulary [GET]

+ Response 200 (application/json)

        {
            "id": 7,
            "slug": "difficulty",
            "name": "difficulty",
            "description": "Learning resource difficulty",
            "vocabulary_type": "m",
            "required": true,
            "weight": 1,
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ],
            "terms": [
                {
                    "id": 1,
                    "slug": "easy",
                    "label": "Easy",
                    "weight": 1
                }
            ],
            "multi_terms": false
        }

### Partially Update a Vocabulary [PATCH]

+ Request (application/json)

        {
            "vocabulary_type": "f"
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "slug": "difficulty",
            "name": "difficulty",
            "description": "Learning resource difficulty",
            "vocabulary_type": "f",
            "required": true,
            "weight": 1,
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ],
            "terms": [
                {
                    "id": 1,
                    "slug": "easy",
                    "label": "Easy",
                    "weight": 1
                }
            ],
            "multi_terms": false
        }

### Update a Vocabulary [PUT]

+ Request (application/json)

        {
            "id": 7,
            "slug": "difficulty",
            "name": "difficulty",
            "description": "Learning resource difficulty",
            "vocabulary_type": "f",
            "required": false,
            "weight": 123,
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ],
            "multi_terms": false
        }

+ Response 200 (application/json)


        {
            "id": 7,
            "slug": "difficulty",
            "name": "difficulty",
            "description": "Learning resource difficulty",
            "vocabulary_type": "f",
            "required": true,
            "weight": 1,
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ],
            "terms": [
                {
                    "id": 1,
                    "slug": "easy",
                    "label": "Easy",
                    "weight": 1
                }
            ],
            "multi_terms": false
        }

## Group Terms

## Terms Collection [/repositories/{repo_slug}/vocabularies/{vocab_slug}/terms/{?learning_resource_type%5b%5d}]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + vocab_slug: `difficulty` (string, required) - slug for the vocabulary
    + learning_resource_type: `chapter` (string, optional) - types of learning resources

### List All Terms [GET]

+ Response 200 (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "slug": "easy",
                    "label": "Easy",
                    "weight": 1
                }
            ]
        }

### Create a New Term [POST]

+ Request (application/json)

        {
            "label": "Easy",
            "weight": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/repositories/physics-1/vocabularies/difficulty/terms/easy

    + Body

        {
            "id": 1,
            "slug": "easy",
            "label": "Easy",
            "weight": 1
        }

## Term [/repositories/{repo_slug}/vocabularies/{vocab_slug}/terms/{term_slug}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + vocab_slug: `difficulty` (string, required) - slug for the vocabulary
    + term_slug: `easy` (string, required) - slug for the term

### View a Term [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "slug": "easy",
            "label": "Easy",
            "weight": 1
        }

### Partially Update a Term [PATCH]

+ Request (application/json)

        {
            "weight": 2
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "slug": "easy",
            "label": "Easy",
            "weight": 2
        }

### Update a Term [PUT]

+ Request (application/json)

        {
            "label": "Easy",
            "weight": 3
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "slug": "easy",
            "label": "Easy",
            "weight": 3
        }

## Group Members

Represents users / members of the repository

## Members Collection [/repositories/{repo_slug}/members/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository


### List All Members [GET]

+ Response 200 (application/json)

    + Body

            {
                "count": 4,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "username": "james",
                        "group_type": "administrators"
                    },
                    {
                        "username": "patricia",
                        "group_type": "administrators"
                    },
                    {
                        "username": "patricia",
                        "group_type": "curators"
                    },
                    {
                        "username": "linda",
                        "group_type": "authors"
                    }
                ]
            }

## Groups For a Member [/repositories/{repo_slug}/members/users/{member_username}/groups/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + member_username: `patricia` (string, required) - username of the user in the system

### View Groups For a Member [GET]

+ Response 200 (application/json)

    + Body

            {
                "count": 2,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "group_type": "administrators"
                    },
                    {
                        "group_type": "curators"
                    }
                ]
            }

### Add Group to a Member [POST]
+ Request (application/json)

        {
            "group_type": "curators"
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/repositories/physics-1/members/users/james/groups/curators/

    + Body

        {
            "group_type": "curators"
        }


## Group for a Member [/repositories/{repo_slug}/members/users/{member_username}/groups/{group_type}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + member_username: `patricia` (string, required) - username of the user in the system
    + group_type: `curators` (string, required) - group type for the user in the system

### View a Group For a Member [GET]

+ Response 200 (application/json)

    + Body

            {
                "group_type": "curators"
            }

### Delete a Group from a Member [DELETE]

+ Response 204 (application/json)

## Members For a Group [/repositories/{repo_slug}/members/groups/{group_type}/users/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + group_type: `administrators` (string, required) - group type for the user in the system

### View Members For a Group [GET]

+ Response 200 (application/json)

    + Body

            {
                "count": 2,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "username": "james"
                    },
                    {
                        "username": "patricia"
                    }
                ]
            }

### Add Member to a Group [POST]
+ Request (application/json)

        {
            "username": "james"
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/repositories/physics-1/members/groups/administrators/users/james/

    + Body

        {
            "username": "james"
        }

## Member for a Group [/repositories/{repo_slug}/members/groups/{group_type}/users/{member_username}/]

+ Parameters
    + repo_slug: `physics-1` (string, required) - slug for the repository
    + group_type: `administrators` (string, required) - group type for the user in the system
    + member_username: `james` (string, required) - username of the user in the system

### View a Member For a Group [GET]

+ Response 200 (application/json)

    + Body

            {
                "username": "james"
            }

### Delete a Member from a Group [DELETE]

+ Response 204 (application/json)
