FORMAT: 1A
HOST: http://lore.mit.edu/

# LORE

Simple API on top of MIT LORE application

# URL
URL Structure is `https://{domain}/api/v1/{resource}/{resourceId}`

| Code   | Description |
| ---    | --- |
|`{domain}`    | The domain of the LORE service. `private-b0103d-lore.apiary-mock.com/` is the Apiary mock server. |
|`/api/v1/`    | The service endpoint includes the current version (v1) |
|`{resource}`  | The resource endpoint for a specific set of objects in the system. Supported endpoints include repositories, vocabularies, learningresources, members|
|`{resource_idd}`  |The `resource_id` sets the ID for a specific object to reference |

*Example: `http://lore.mit.edu/api/v1/repos` will return a json representation of all repositories.*

*Example: `http://lore.mit.edu/api/v1/repos/123` will return a json representation of the repository with id=123.*

# Operations
LORE API uses the following HTTP verbs

| Verb   | Description |
| ---    | --- |
|`GET`   |Select one or more items. Success returns 200 status code with json result item(s) in body.|
|`POST`  |Create a new item. Success returns 201 status code with newly created json item in body.|
|`PUT`   |Update an item. Success returns 200 status code with updated json item in body.|
|`DELETE`|Delete an item. Success returns 204 status code with no body.|

# Status Codes
The API responds with one of the following status codes.

| Code| Description |
| --- | --- |
|`200`| Success. Request completed. |
|`201`| Success. New resource created. |
|`204`| Success. No content to return. Only the status code returns. |
|`400`| Bad Request - The request could not be parsed. |
|`401`| Unauthorized - user is not logged in, cannot access resource. |
|`404`| Not Found - resource doesn't exist. |
|`422`| Unprocessable Entity - The request could not be parsed due to validation errors. |
|`500`| Server error. |


# Authentication

tbd.

# Pagination

Requests that return multiple items all accept a `?page` parameter

Example: `http://lore.mit.edu/api/v1/repos?page=2`

Page numbering is 1-based. Omitting the ?page parameter will return the first page.

# LORE API Root [/]

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "repositories_url": "/repos"
        }



## Group Repositories

Repository resource

## Repositories [/repos/{repo_id}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository

### Retrieve a repository [GET]

+ Response 200 (application/json)

        {
            "tbd": "tbd",
        }

### Delete a repository [DELETE]
Delete the repository and all its associated resources (learning resources, vocabularies etc.)

+ Response 204

### Create a New Repository [POST]

Create a repository by providing its JSON representation

+ Request (application/json)

        {
            "name": "Physics 1",
            "description": "All intro-to-physics courses"
        }

+ Response 201 (application/json)

    + Headers

            Location: /repos/123

    + Body

            {
                "name": "Physics 1",
                "description": "All intro-to-physics courses"
            }


## Repository Collection [/repos]

### List All Repositories [GET]

+ Response 200 (application/json)

    + Headers

            Link: </repos?page=2>; rel="next"

    + Body

            [
                {
                    "tbd": "tbd",
                }
            ]

## Group Learningobjects

Learning Object resource

## Learningobjects [/repos/{repo_id}/learningobjects/{learningobject_id}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + learningobject_id: `1007` (number, required) - ID of the learning object

### View a Learning resource [GET]

+ Response 200 (application/json)

        {
            "tbd": "tbd",
        }

## Learningobjects Collection [/repos/{repo_id}/learningobjects{?learning_resource_type%5b%5d,course_id,xa_nr_views,page}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + learning_resource_type: `7` (number,optional) - types of learning resources
    + course_id: (string,optional)

### List learning resources [GET]

+ Response 200 (application/json)

    + Headers

            Link: </repos/17/learningobjects?learning_resource_type[]=3&learning_resource_type[]=4&page=2>; rel="next"

    + Body

            [
                {
                    "tbd": "tbd",
                }
            ]

## Group Vocabularies


Resources related to Vocabularies in the API.

## Vocabulary [/repos/{repo_id}/vocabs/{vocab_id}]


+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + vocab_id: `7` (number, required) - ID of the Vocabulary

### View a Vocabulary [GET]

+ Response 200 (application/json)

        {
            "tbd": "tbd",
        }

## Vocabularies Collection [/repos/{repo_id}/vocabs]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository

### List All Vocabularies [GET]

+ Response 200 (application/json)

    + Headers

            Link: </repos/17/vocabs?page=2>; rel="next"

    + Body

            [
                {
                    "tbd": "tbd",
                }
            ]

### Create a New Vocabulary [POST]

Create your own vocabulary by providing its JSON representation

+ Request (application/json)

        {
            "name": "learning objectives",
            "description": "learning objectives description",
            "vocabulary_type": "m"
            "weight": 1
            "learning_resource_types": [
                "Problem",
                "Vertical"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /repos/17/vocabularies/2

    + Body

            {
                "name": "learning objectives",
                "description": "learning objectives description",
                "vocabulary_type": "m"
                "weight": 1
                "learning_resource_types": [
                    "Problem",
                    "Vertical"
                ]
            }


## Term [/repos/{repo_id}/vocabs/{vocab_id}/term/{term_id}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + vocab_id: 1 (required, String) - ID of the Vocabulary
    + term_id: 1 (required, String) - ID of the Taxonomy term

### View a Term [GET]

+ Response 200 (application/json)

        {
            "tbd": "tbd",
        }


## Terms Collection [/repos/{repo_id}/vocabs/{vocab_id}/terms{?learning_resource_type%5b%5d}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + vocab_id: `7` (number, required) - ID of the Vocabulary
    + learning_resource_type: `1` (number, optional) - types of learning resources

### List All Terms [GET]

+ Response 200 (application/json)

    + Headers

            Link: </repos/17/vocabs/7/terms?page=2>; rel="next"

    + Body

            [
                {
                    "tbd": "tbd",
                }
            ]

## Group Members

Represents users / members of the repository

## Member [/repos/{repo_id}/members/{member_id}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + member_id: `107` (number, required) - ID of the user in the system

### View a Member [GET]

+ Response 200 (application/json)

        {
            "tbd": "tbd"
        }

## Members Collection [/repos/{repo_id}/members{?role_id}]

+ Parameters
    + repo_id: `17` (number, required) - ID of the Repository
    + role_id: ID of the role this member belongs to


### List All Members [GET]

+ Response 200 (application/json)

    + Headers

            Link: </repos/1/members?page=2&role=3>; rel="next"

    + Body

            [
                {
                    "tbd": "tbd"
                }
            ]
